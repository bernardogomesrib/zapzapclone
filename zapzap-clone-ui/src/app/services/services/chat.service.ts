/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ChatResponse } from '../models/chat-response';
import { getMethodName2 } from '../fn/chat/get-method-name-2';
import { GetMethodName2$Params } from '../fn/chat/get-method-name-2';
import { post } from '../fn/chat/post';
import { Post$Params } from '../fn/chat/post';

@Injectable({ providedIn: 'root' })
export class ChatService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMethodName2()` */
  static readonly GetMethodName2Path = '/chat';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMethodName2()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMethodName2$Response(params?: GetMethodName2$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ChatResponse>>> {
    return getMethodName2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMethodName2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMethodName2(params?: GetMethodName2$Params, context?: HttpContext): Observable<Array<ChatResponse>> {
    return this.getMethodName2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ChatResponse>>): Array<ChatResponse> => r.body)
    );
  }

  /** Path part for operation `post()` */
  static readonly PostPath = '/chat';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `post()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  post$Response(params: Post$Params, context?: HttpContext): Observable<StrictHttpResponse<ChatResponse>> {
    return post(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `post$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  post(params: Post$Params, context?: HttpContext): Observable<ChatResponse> {
    return this.post$Response(params, context).pipe(
      map((r: StrictHttpResponse<ChatResponse>): ChatResponse => r.body)
    );
  }

}
