/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getMethodName1 } from '../fn/message/get-method-name-1';
import { GetMethodName1$Params } from '../fn/message/get-method-name-1';
import { MessageResponse } from '../models/message-response';
import { patchMethodName } from '../fn/message/patch-method-name';
import { PatchMethodName$Params } from '../fn/message/patch-method-name';
import { postMethodName } from '../fn/message/post-method-name';
import { PostMethodName$Params } from '../fn/message/post-method-name';
import { postMethodName1 } from '../fn/message/post-method-name-1';
import { PostMethodName1$Params } from '../fn/message/post-method-name-1';

@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `postMethodName()` */
  static readonly PostMethodNamePath = '/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postMethodName()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postMethodName$Response(params: PostMethodName$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return postMethodName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postMethodName$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postMethodName(params: PostMethodName$Params, context?: HttpContext): Observable<void> {
    return this.postMethodName$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `patchMethodName()` */
  static readonly PatchMethodNamePath = '/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patchMethodName()` instead.
   *
   * This method doesn't expect any request body.
   */
  patchMethodName$Response(params: PatchMethodName$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return patchMethodName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patchMethodName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  patchMethodName(params: PatchMethodName$Params, context?: HttpContext): Observable<void> {
    return this.patchMethodName$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `postMethodName1()` */
  static readonly PostMethodName1Path = '/message/upload-media';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postMethodName1()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postMethodName1$Response(params: PostMethodName1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return postMethodName1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postMethodName1$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postMethodName1(params: PostMethodName1$Params, context?: HttpContext): Observable<void> {
    return this.postMethodName1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMethodName1()` */
  static readonly GetMethodName1Path = '/message/{chatId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMethodName1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMethodName1$Response(params: GetMethodName1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MessageResponse>>> {
    return getMethodName1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMethodName1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMethodName1(params: GetMethodName1$Params, context?: HttpContext): Observable<Array<MessageResponse>> {
    return this.getMethodName1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MessageResponse>>): Array<MessageResponse> => r.body)
    );
  }

}
