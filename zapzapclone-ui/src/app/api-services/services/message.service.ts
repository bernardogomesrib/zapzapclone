/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getMessagesByChat } from '../fn/message/get-messages-by-chat';
import { GetMessagesByChat$Params } from '../fn/message/get-messages-by-chat';
import { MessageResponse } from '../models/message-response';
import { patchStatusChange } from '../fn/message/patch-status-change';
import { PatchStatusChange$Params } from '../fn/message/patch-status-change';
import { postMessage } from '../fn/message/post-message';
import { PostMessage$Params } from '../fn/message/post-message';
import { postMessageWithFile } from '../fn/message/post-message-with-file';
import { PostMessageWithFile$Params } from '../fn/message/post-message-with-file';

@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `postMessage()` */
  static readonly PostMessagePath = '/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postMessage$Response(params: PostMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return postMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postMessage(params: PostMessage$Params, context?: HttpContext): Observable<void> {
    return this.postMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `patchStatusChange()` */
  static readonly PatchStatusChangePath = '/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patchStatusChange()` instead.
   *
   * This method doesn't expect any request body.
   */
  patchStatusChange$Response(params: PatchStatusChange$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return patchStatusChange(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patchStatusChange$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  patchStatusChange(params: PatchStatusChange$Params, context?: HttpContext): Observable<void> {
    return this.patchStatusChange$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `postMessageWithFile()` */
  static readonly PostMessageWithFilePath = '/message/upload-media';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postMessageWithFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postMessageWithFile$Response(params: PostMessageWithFile$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return postMessageWithFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postMessageWithFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postMessageWithFile(params: PostMessageWithFile$Params, context?: HttpContext): Observable<void> {
    return this.postMessageWithFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMessagesByChat()` */
  static readonly GetMessagesByChatPath = '/message/{chatId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMessagesByChat()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessagesByChat$Response(params: GetMessagesByChat$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MessageResponse>>> {
    return getMessagesByChat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMessagesByChat$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessagesByChat(params: GetMessagesByChat$Params, context?: HttpContext): Observable<Array<MessageResponse>> {
    return this.getMessagesByChat$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MessageResponse>>): Array<MessageResponse> => r.body)
    );
  }

}
